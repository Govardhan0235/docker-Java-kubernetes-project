# Docker
# Build a Docker images
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  imageRepo: samplejavaapp
  tag: '$(Build.BuildId)'

stages:
- stage: Build for shopfront
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Maven@4
      inputs:
        mavenPomFile: '$(Build.SourcesDirectory)/shopfront/pom.xml'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'ACR_Connection_GGR'
        repository: '$(imageRepo)-shopfront'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/shopfront/Dockerfile'
        tags: |
          $(tag)
          latest
    - task: PublishPipelineArtifact@1
      inputs:
              targetPath: '$(Pipeline.Workspace)/s/kubernetes'
              artifact: 'manifest'
              publishLocation: 'pipeline'
              
- stage: Build for productcatalogue
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Maven@4
      inputs:
        mavenPomFile: '$(Build.SourcesDirectory)/productcatalogue/pom.xml'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'ACR_Connection_GGR'
        repository: '$(imageRepo)-productcatalogue'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/productcatalogue/Dockerfile'
        tags: |
          $(tag)
          latest
     
     
  - stage: Build for stockmanager
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Maven@4
      inputs:
        mavenPomFile: '$(Build.SourcesDirectory)/stockmanager/pom.xml'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'ACR_Connection_GGR'
        repository: '$(imageRepo)-stockmanager'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/stockmanager/Dockerfile'
        tags: |
          $(tag)
          latest        
          
- stage: Deploy
  displayName: Deploy to DEV
  dependsOn: |
      Build for stockmanager
      Build for productcatalogue
      Build for shopfront
     
  variables:
    acrsecrect: k8sexampleacrauth
  jobs:
  - job: AKS
    displayName: Deploy to AKS
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'manifest'
        targetPath: '$(Pipeline.Workspace)/manifest'
    - task: KubernetesManifest@0
      inputs:
          action: 'createSecret'
          kubernetesServiceConnection: 'Kubernetes_Connection_GGR'
          namespace: 'default'
          secretType: 'dockerRegistry'
          secretName: '$(acrsecrect)'
          dockerRegistryEndpoint: 'ACR_Connection_GGR'
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'Kubernetes_Connection_GGR'
        namespace: 'default'
        manifests: |
           '$(Pipeline.Workspace)/manifest/productcatalogue-service.yaml'
           '$(Pipeline.Workspace)/manifest/stockmanager-service.yaml'
           '$(Pipeline.Workspace)/manifest/shopfront-service.yaml'
